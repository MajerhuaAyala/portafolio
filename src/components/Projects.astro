---
import Link from "./icons/Link.astro"
import Button from "./Button.astro"
import Modal from "./Modal.astro";
import Gallery from "../components/Gallery.astro"
import Utils from "./getImages"
import config from "./confing"
const baseUrl = config.BASE_URL
const imagesToSEV = await new Utils().readFiles('sev', baseUrl)
const imagesFireCity = await new Utils().readFiles('firecity', baseUrl)
const imagesFacturador = await new Utils().readFiles('facturador', baseUrl)
const imagesTytroll = await new Utils().readFiles('tytroll', baseUrl)
const imagesMedical = await new Utils().readFiles('medical', baseUrl)
let id = 1

const PROJECTS = [
    {
        title: "Fire city",
        description:
            "Plataforma web para monitoreo en tiempo real de sensores ambientales (humo, fuego, humedad, luz, etc) con notificaciones instantáneas ante cualquier anomalía.",
        summary: {
            objective: `El sistema IoT busca resolver el problema de la detección tardía de humo, fuego y humedad en entornos residenciales o comerciales, lo que puede llevar a daños graves y riesgos para la seguridad. 
            La detección precisa y oportuna de estas condiciones críticas permite emitir alertas rápidas, reduciendo daños materiales, costos y peligros para la vida.`,
            functionalities: [
              "Detección y Notificación de Alarmas",
              "Monitorización en Tiempo Real",
              "Integración con Otros Dispositivos",
              "Respuesta Automática",
              "Seguridad y Gestión de Usuarios",
              "Alertas Predictivas",
              "Integración con Sistemas de Emergencia",
              "Personalización de Configuraciones"
            ] ,
            challenges: [
              "Calibración y Precisión de Sensores",
              "Interferencia Ambiental",
              "Conectividad y Comunicación",
              "Escalabilidad",
              "Seguridad de Datos",
              "Integración de Sistemas",
              "Gestión de Alarmas",
              "Resiliencia y Redundancia"
            ],
            technologies: [
              "AWS IOT Core",
              "Lambda",
              "DynamoDB",
              "SNS",
              "SQS",
              "CloudWatch",
              "Cognito",
              "SES",
              "Firebase Realtime Database",
              "Firebase Cloud Messaging",
              "API Gateway",
              "MQTT",
              "Jenkins",
              "Jest",
              "Cucumber"
            ]
        },
        image: `${baseUrl}/projects/firecity.png`,
        id: id++,
        images: imagesFireCity
    },
  {
    title: "Rimac SEV",
    description: "Plataforma web de subasta de servicios como envío de conductor de reemplazo, renovación de SOAT y atención mecánica, con seguimiento en tiempo real.",
      summary: {
          objective: `El sistema busca resolver la falta de visibilidad y eficiencia en la contratación de servicios 
          como envío de conductor de reemplazo, renovación de SOAT y atención mecánica, mediante una plataforma de subasta que ofrece 
          transparencia y seguimiento en tiempo real de los vehículos de atención.`,

          functionalities: [
            "Registro y Gestión de Usuarios",
            "Subastas de Servicios",
            "Gestión de Servicios",
            "Seguimiento en Tiempo Real",
            "Notificaciones y Alertas",
            "Pagos y Facturación",
            "Gestión de Reseñas y Calificaciones",
            "Reportes y Análisis",
            "Seguridad y Privacidad",
            "Seguimiento en mapa de los vehículos de auxilio",
            "Asignación del caso al vehículo más próximo"
          ] ,
          challenges: [
            "Integración de mapas en tiempo real (precisión, actualización y rendimiento)",
            "Gestión de subastas (escalabilidad, sincronización)",
            "Seguridad y privacidad",
            "Procesamiento de pagos",
            "Redimiento y escalabilidad",
            "Integración con proveedores de servicios (Sales Force)",
            "Manejo de errores y fallos",
            "Cumpliento normativo"
          ],
          technologies: [
            "AWS Lambda",
            "Nodejs",
            "Serverless",
            "NestJs",
            "Amazon Elastic Container Service (Amazon ECS)",
            "Amazon DynamoDB",
            "Amazon RDS (MySQl)",
            "Docker",
            "Redis",
            "API Gateway",
            "Amazon S3",
            "SNS",
            "SQS",
            "CloudFormation",
            "StepFunction",
            "EventBridge",
            "AWS Amplify",
            "Cognito",
            "Firebase Realtime Database",
            "Firebase Cloud Messaging (FCM)",
            "Google Maps Geocoding",
            "Google Maps Directions",
            "Jenkins",
            "Jest",
            "Cucumber",
          ]
      },
    image: `${baseUrl}/projects/sev/login.png`,
    id: id++,
    images: imagesToSEV
  },
  {
    title: "Facturador",
    description: "Plataforma web de subasta de servicios como envío de conductor de reemplazo, renovación de SOAT y atención mecánica, con seguimiento en tiempo real.",
    summary: {
      objective: "Un sistema que gestiones las asignaciones de casos a lo proveedores",
      functionalities: ["Mandar notificaciones en tiempo real", "Subasta automatica"] ,
      challenges: ["Tener la data actualizada en tiempo real"],
      technologies: ["ECS", "ECR"]
    },
    image: `${baseUrl}/projects/facturador.png`,
    id: id++,
    images: imagesFacturador
  },
  {
    title: "Medical",
    description: "El sistema optimiza la atención médica al centralizar los precios, seguimiento de ambulancias, gestión de casos y notificaciones, mejorando la respuesta y la satisfacción del paciente.",
    summary: {
      objective: "El sistema resuelve la ineficiencia en la atención médica al centralizar la gestión de recursos, precios, y seguimiento de casos en tiempo real, optimizando la respuesta y mejorando la satisfacción del paciente.",
      functionalities: [
        "Gestión de precios de medicamentos",
        "Gestión de doctores",
        "Gestión de casos",
        "Gestión de clientes",
        "Gestión de tipo de atención",
        "Reportes",
        "Monitoreo de ambulancias en tiempo real",
        "Notificaciones y alertas",
        "Asignación de proveedores",
        "Integraciones externas",
        "Gestión de incidencias y soporte"
      ] ,
      challenges: [
        "Integración de mapas en tiempo real (precisión, actualización y rendimiento)",
        "Asegurar que los datos sensibles, como la información del paciente",
        "Rendimiento y escalabilidad",
        "Sincronización y actualización de los datos en tiempo real"
      ],
      technologies: [
        "AWS Lambda",
        "Amazon API Gateway",
        "Amazon RDS/Aurora",
        "Amazon S3",
        "Amazon CloudWatch",
        "Cognito",
        "Code pipeline",
        "Jenkins",
        "SNS",
        "SQS",
        "AWS Step Function",
        "Cloudformation",
        "Firebase Realtime Database",
        "Firebase Cloud Messaging (FCM)",
        "Docker",
        "Amazon Elastic Container Service (Amazon ECS)",
        "NestJS",
        "Serverless",
        "Event Bridge"
      ]
    },
    image: `${baseUrl}/projects/medical-login.png`,
    id: id++,
    images: imagesMedical
  },

  {
    title: "Tytroll",
    description: "El sistema gestiona el registro de ingresos, visitas, eventos, documentos e inventarios, centralizando y automatizando estos procesos para mejorar la eficiencia y seguridad en la empresa.",
    summary: {
      objective: "El sistema busca resolver la falta de control y organización en la gestión de ingresos, visitas, documentos e inventarios en una empresa, centralizando y automatizando estos procesos para mejorar la eficiencia y seguridad.",
      functionalities: [
        "Gestión de usuarios y roles",
        "Control de acceso",
        "Gestión de visitas",
        "Gestión de eventos y eventualidades",
        "Gestión documental",
        "Gestión de inventario",
        "Reportes y análisis",
        "Integración con Otros Sistemas",
        "Seguridad y Privacidad"
      ] ,
      challenges: [
        "Sincronización de datos",
        "Seguridad y protección de datos",
        "Gestión en tiempo real",
        "Cumplimiento normativo",
        "Precisión de inventarios"
      ],
      technologies: [
        "AWS IAM",
        "AWS Cognito",
        "AWS RDS",
        "S3",
        "Firebase Realtime Database",
        "NestJs",
        "Amazon Elastic Container Service (Amazon ECS)",
        "Jenkins",
        "SES"
      ]
    },
    image: `${baseUrl}/projects/tytroll-login.png`,
    id: id++,
    images: imagesTytroll
  },
]
---

<div class="flex flex-col gap-y-16">
  {
    PROJECTS.slice(0,2).map(({ image, title, description, id, images, summary }) => (
    <article class="flex flex-col space-x-0 space-y-8 group md:flex-row md:space-x-8 md:space-y-0">
  <div class="w-full md:w-1/2">
    <div class="relative flex flex-col items-center col-span-6 row-span-5 gap-8 transition duration-500 ease-in-out transform shadow-xl overflow-clip rounded-xl sm:rounded-xl md:group-hover:-translate-y-1 md:group-hover:shadow-2xl lg:border lg:border-gray-800 lg:hover:border-gray-700 lg:hover:bg-gray-800/50">
      <img alt="Recién llegado vs 5 años en Nueva Zelanda" class="object-cover object-top w-full h-56 transition duration-500 sm:h-full md:scale-110 md:group-hover:scale-105" loading="lazy" src={image} />
    </div>
  </div>

  <div class="w-full md:w-1/2 md:max-w-lg">
    <h3 class="text-2xl font-bold text-gray-800 dark:text-gray-100">
      {title}
    </h3>
    <div class="flex flex-wrap mt-2">
      <div class="mt-2 text-gray-700 dark:text-gray-400">{description}</div>
      <footer class="flex items-end justify-start mt-4 gap-x-4">
            <Button id={id}>
              <Link class="size-4" />
              Preview
            </Button>
        </footer>

        <Modal id=`extralarge-modal-${id}` title={title}>
            <div class="flex flex-col lg:flex-row h-full">
                <div class="w-full lg:w-4/5 p-4 overflow-y-auto flex-1">
                    <Gallery urls = {images}></Gallery>
                </div>
                <div class="w-full lg:w-1/5 p-4 overflow-y-auto border-t lg:border-t-0 lg:border-l dark:border-gray-600">
                    <div class="space-y-4">
                        <div>
                            <h4 class="font-semibold text-gray-900 dark:text-gray-100">Problema:</h4>
                            <p class="text-gray-700 dark:text-gray-400">{summary.objective}</p>
                        </div>
                        <div>
                            <h4 class="font-semibold text-gray-900 dark:text-gray-100">Funcionalidades:</h4>
                            <ul class="list-disc list-inside text-gray-700 dark:text-gray-400">
                                {summary.functionalities.map(func => (
                                        <li>{func}</li>
                                ))}
                            </ul>
                        </div>
                        <div>
                            <h4 class="font-semibold text-gray-900 dark:text-gray-100">Retos:</h4>
                            <ul class="list-disc list-inside text-gray-700 dark:text-gray-400">
                                {summary.challenges.map(func => (
                                        <li>{func}</li>
                                ))}
                            </ul>
                        </div>
                        <div>
                            <h4 class="font-semibold text-gray-900 dark:text-gray-100">Tecnologías:</h4>
                            <ul class="list-disc list-inside text-gray-700 dark:text-gray-400">
                                {summary.technologies.join(", ")}.
                            </ul>
                        </div>
                    </div>
                </div>
            </div>
        </Modal>
    </div>
  </div>
</article>
    ))
  }

<div id="elementosRestantes" class="hidden flex flex-col gap-y-16">
  {PROJECTS.slice(2).map(({image, title, description, id, images, summary}) => (
    <article class="flex flex-col space-x-0 space-y-8 group md:flex-row md:space-x-8 md:space-y-0 transition-all duration-500 ">
  <div class="w-full md:w-1/2">
    <div class="relative flex flex-col items-center col-span-6 row-span-5 gap-8 transition duration-500 ease-in-out transform shadow-xl overflow-clip rounded-xl sm:rounded-xl md:group-hover:-translate-y-1 md:group-hover:shadow-2xl lg:border lg:border-gray-800 lg:hover:border-gray-700 lg:hover:bg-gray-800/50">
      <img alt="Recién llegado vs 5 años en Nueva Zelanda" class="object-cover object-top w-full h-56 transition duration-500 sm:h-full md:scale-110 md:group-hover:scale-105" src={image} />
    </div>
  </div>

  <div class="w-full md:w-1/2 md:max-w-lg">
    <h3 class="text-2xl font-bold text-gray-800 dark:text-gray-100">
      {title}
    </h3>
    <div class="flex flex-wrap mt-2">
      <div class="mt-2 text-gray-700 dark:text-gray-400">{description}</div>
      <footer class="flex items-end justify-start mt-4 gap-x-4">
            <Button id={id}>
              <Link class="size-4" />
              Preview
            </Button>
        </footer>

        <Modal id=`extralarge-modal-${id}` title={title}>
            <div class="flex flex-col lg:flex-row h-full">
                <div class="w-full lg:w-4/5 p-4 overflow-y-auto flex-1">
                    <Gallery urls = {images}></Gallery>
                </div>
                <div class="w-full lg:w-1/5 p-4 overflow-y-auto border-t lg:border-t-0 lg:border-l dark:border-gray-600">
                    <div class="space-y-4">
                        <div>
                            <h4 class="font-semibold text-gray-900 dark:text-gray-100">Problema:</h4>
                            <p class="text-gray-700 dark:text-gray-400">{summary.objective}</p>
                        </div>
                        <div>
                            <h4 class="font-semibold text-gray-900 dark:text-gray-100">Funcionalidades:</h4>
                            <ul class="list-disc list-inside text-gray-700 dark:text-gray-400">
                                {summary.functionalities.map(func => (
                                        <li>{func}</li>
                                ))}
                            </ul>
                        </div>
                        <div>
                            <h4 class="font-semibold text-gray-900 dark:text-gray-100">Retos:</h4>
                            <ul class="list-disc list-inside text-gray-700 dark:text-gray-400">
                                {summary.challenges.map(func => (
                                        <li>{func}</li>
                                ))}
                            </ul>
                        </div>
                        <div>
                            <h4 class="font-semibold text-gray-900 dark:text-gray-100">Tecnologías:</h4>
                            <ul class="list-disc list-inside text-gray-700 dark:text-gray-400">
                              {summary.technologies.join(", ")}.
                            </ul>
                        </div>
                    </div>
                </div>
            </div>
        </Modal>
    </div>
  </div>
</article>
  ))}
</div>

{PROJECTS.length > 2 && (
  <button
          id="mostrarMas"
          class="inline-flex items-center justify-center gap-2 px-4 py-1 text-gray-800 transition bg-gray-100 border border-gray-300 rounded-full dark:bg-gray-800 dark:border-gray-600 dark:text-white focus-visible:ring-yellow-500/80 text-md hover:bg-gray-900 hover:border-gray-700 group max-w-fit hover:text-white focus:outline-none focus-visible:outline-none focus-visible:ring focus-visible:ring-white focus-visible:ring-offset-2 active:bg-black"
  >
      Mostrar restantes
  </button>
)}

</div>


<script>
  document.addEventListener('DOMContentLoaded', () => {
    const openButtons = document.querySelectorAll('.open-modal');
    openButtons.forEach(button => {
      button.addEventListener('click', () => {
        const modalId = button.getAttribute('id');
        const modal = document.getElementById(`extralarge-modal-${modalId}`);
        console.log("Modal: ", modal)
        if (modal){
          modal.classList.remove('hidden');
          document.body.classList.add('overflow-y-hidden');
        }
      });
    });
  });

  const botonMostrarMas = document.getElementById('mostrarMas');
  const elementosRestantes = document.getElementById('elementosRestantes');

  if (botonMostrarMas && elementosRestantes) {
    botonMostrarMas.addEventListener('click', () => {
      elementosRestantes.classList.toggle('hidden');
      botonMostrarMas.textContent = elementosRestantes.classList.contains('hidden')
        ? `Mostrar restantes`
        : 'Mostrar menos';
    });
  }

</script>


